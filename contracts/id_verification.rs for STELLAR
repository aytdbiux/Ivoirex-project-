#![no_std]
use soroban_sdk::{contractimpl, contracttype, Env, Symbol, Address};

#[contracttype]
#[derive(Clone)]
pub struct Identity {
    user: Address,
    name: Symbol,
    verified: bool,
}

pub struct IDContract;

#[contractimpl]
impl IDContract {
    pub fn register_user(env: Env, user: Address, name: Symbol) {
        let id = Identity { user: user.clone(), name, verified: false };
        env.storage().set(user, id);
    }

    pub fn verify_user(env: Env, user: Address) {
        let mut id: Identity = env.storage().get_unchecked(user).unwrap();
        id.verified = true;
        env.storage().set(user, id);
    }

    pub fn get_user(env: Env, user: Address) -> Option<Identity> {
        env.storage().get(user)
    }
}
